{"version":3,"sources":["AutoScrollViewItem.js","AutoScrollView.js","App.js","serviceWorker.js","index.js"],"names":["AutoScrollViewItem","position","city","time","className","href","AutoScrollView","this","props","datas","name","counts","length","styles","animation","style","map","item","key","positionId","Component","App","state","axios","get","then","response","setState","data","returnValue","console","log","catch","error","src","alt","height","type","maxLength","placeholder","value","width","Boolean","window","location","hostname","match","ReactDOM","render","test","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c8f9cd1f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './AutoScrollViewItem.css'\r\n\r\nfunction AutoScrollViewItem({position,city,time}) {\r\n  \r\n  return (\r\n    <li className=\"position-item\">\r\n      <a className=\"position\" href=\"/#\">{position}</a>\r\n      <span className=\"city\">{city}</span>\r\n      <span className=\"time\">{time}</span>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default AutoScrollViewItem;","import React,{Component} from 'react';\r\nimport './AutoScrollView.css';\r\nimport AutoScrollViewItem from \"./AutoScrollViewItem\";\r\n\r\nclass AutoScrollView extends Component {\r\n\r\n  render() {\r\n    const { datas,name,city,time } = this.props;\r\n    const counts = datas.length;\r\n    let styles = {\r\n      animation: `move-move ${0.035*counts*50}s linear infinite running`\r\n    }\r\n    return (\r\n      <div className=\"newPosition-list\">\r\n        <div className=\"more-position\">\r\n          最新职位\r\n          <a className=\"clickMorePosition\" href=\"/#\">更多</a>\r\n        </div>\r\n        {counts >5 && \r\n        <style>\r\n          {\r\n            `\r\n            @keyframes move-move {\r\n              0% { top: 50px}\r\n              100% { top: -${counts*50-50}px}\r\n            }\r\n            .newPosition-list .position-list:hover {\r\n              animation: move-move ${0.035*counts*50}s linear infinite paused !important;\r\n            }\r\n            `\r\n          }\r\n        </style>}\r\n        <ul style={styles} className=\"position-list\" >\r\n          {\r\n            datas.map(item => (\r\n              <AutoScrollViewItem key={item.positionId} position={item[name]} time={item[time]} city={item[city]}/>\r\n            ))\r\n          }\r\n          {counts > 5 && \r\n            datas.map(item => (\r\n              <AutoScrollViewItem key={item.positionId+1} position={item[name]} time={item[time]} city={item[city]} />\r\n            ))\r\n          }\r\n        </ul>\r\n        \r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AutoScrollView;","import React,{Component} from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport AutoScrollView from \"./AutoScrollView\";\n\nclass App extends Component {\n\n  state = {\n    datas: []\n  }\n\n  componentDidMount() {\n    axios.get('/mock/doLatestPosition.json')\n      .then((response) => {\n        this.setState({\n          datas: response.data.returnValue\n        })\n        console.log(response.data);\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n  }\n\n  render() {\n    // console.log(this.props.test);\n    const {datas} = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"App-container\">\n            <a className=\"logo\" href=\"/#\">\n              <img src=\"https://img.alicdn.com/tfs/TB1Zv8_lxSYBuNjSspjXXX73VXa-390-63.png\" alt='...' height=\"20\"/>\n            </a>\n            <i>|</i>\n            <span>社招官网</span>\n            <div className=\"menu\">\n              <span className=\"current menu-item\">首&nbsp;&nbsp;页</span>\n              <span className=\"menu-item\">社会招聘</span>\n              <span className=\"menu-item\">校园招聘</span>\n              <span className=\"menu-item\">了解阿里</span>\n              <span className=\"menu-item\">个人中心</span>\n            </div>\n            <div className=\"login\">\n            欢迎来到阿里巴巴集团招聘！ \n            <a href=\"/#\">登录</a> | <a href=\"/#\">注册</a>\n            </div>\n          </div>\n        </header>\n        <main className=\"App-main\">\n          <img src=\"https://img.alicdn.com/tfs/TB14TEEm7CWBuNjy0FaXXXUlXXa-1440-478.png\" alt='图片' />\n          <div className=\"cover\" />\n          <div className=\"main-container\">\n            <p>If not now, when?</p>\n            <p>If not me, who?</p>\n            <p className=\"en-p\">此时此刻，非你莫属！</p>\n            <div className=\"search-box\">\n              <input className=\"search-text\" type=\"input\" maxLength=\"30\" placeholder=\"请输入职位关键词\"  />\n              <input className=\"search-btn\" type=\"submit\" value=\"搜索\" />\n            </div>\n            <div className=\"hot-text\">\n              热门搜索：\n              <a className=\"search-key\" href=\"/#\">JAVA</a>\n              <a className=\"search-key\" href=\"/#\">IOS</a>\n              <a className=\"search-key\" href=\"/#\">数据</a>\n              <a className=\"search-key\" href=\"/#\">安全</a>\n              <a className=\"search-key\" href=\"/#\">搜索</a>\n              <a className=\"search-key\" href=\"/#\">算法</a>\n              <a className=\"search-key\" href=\"/#\">运营</a>\n              <a className=\"search-key\" href=\"/#\">视觉</a>\n              <a className=\"search-key\" href=\"/#\">交互</a>\n              <a className=\"search-key\" href=\"/#\">前端</a>\n            </div>\n          </div>\n        </main>\n        <div className=\"newPosition\">\n          <div className=\"newPosition-container\">\n            <AutoScrollView datas={datas} name=\"name\" city=\"workLocation\" time=\"applyTimeDesc\"/>\n            <div className=\"show\">\n              <a className=\"show-pic\" href=\"/#\">\n                <img src=\"https://img.alicdn.com/tfs/TB1Z7JvoxGYBuNjy0FnXXX5lpXa-358-136.png\" alt=\"阿里云\"/>\n              </a>\n              <a className=\"show-pic\" href=\"/#\">\n                <img style={{width: '260px'}} src=\"https://img.alicdn.com/tfs/TB18tFCCH2pK1RjSZFsXXaNlXXa-240-34.svg\" alt=\"xx\"/>\n              </a>\n            </div>\n          </div>\n        </div>\n        <footer className='App-footer'>\n          <div className=\"footer-container\">\n            阿里巴巴集团 Copyright ©1999-2019 版权所有\n          </div>\n        </footer>\n      </div> \n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App test=\"1\"/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}